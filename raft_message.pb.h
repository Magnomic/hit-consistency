// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_5fmessage_2eproto;
namespace hit_consistency {
class RequestVoteRequest;
class RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
class RequestVoteResponse;
class RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
}  // namespace hit_consistency
PROTOBUF_NAMESPACE_OPEN
template<> ::hit_consistency::RequestVoteRequest* Arena::CreateMaybeMessage<::hit_consistency::RequestVoteRequest>(Arena*);
template<> ::hit_consistency::RequestVoteResponse* Arena::CreateMaybeMessage<::hit_consistency::RequestVoteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hit_consistency {

// ===================================================================

class RequestVoteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hit_consistency.RequestVoteRequest) */ {
 public:
  inline RequestVoteRequest() : RequestVoteRequest(nullptr) {};
  virtual ~RequestVoteRequest();

  RequestVoteRequest(const RequestVoteRequest& from);
  RequestVoteRequest(RequestVoteRequest&& from) noexcept
    : RequestVoteRequest() {
    *this = ::std::move(from);
  }

  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
               &_RequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteRequest* New() const final {
    return CreateMaybeMessage<RequestVoteRequest>(nullptr);
  }

  RequestVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteRequest& from);
  void MergeFrom(const RequestVoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hit_consistency.RequestVoteRequest";
  }
  protected:
  explicit RequestVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessage_2eproto);
    return ::descriptor_table_raft_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kPeerIdFieldNumber = 2,
    kTermFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
    kLastLogIndexFieldNumber = 5,
  };
  // optional string server_id = 1;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  const std::string& server_id() const;
  void set_server_id(const std::string& value);
  void set_server_id(std::string&& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  std::string* mutable_server_id();
  std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_id(
      std::string* server_id);
  private:
  const std::string& _internal_server_id() const;
  void _internal_set_server_id(const std::string& value);
  std::string* _internal_mutable_server_id();
  public:

  // optional string peer_id = 2;
  bool has_peer_id() const;
  private:
  bool _internal_has_peer_id() const;
  public:
  void clear_peer_id();
  const std::string& peer_id() const;
  void set_peer_id(const std::string& value);
  void set_peer_id(std::string&& value);
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  std::string* mutable_peer_id();
  std::string* release_peer_id();
  void set_allocated_peer_id(std::string* peer_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_peer_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_peer_id(
      std::string* peer_id);
  private:
  const std::string& _internal_peer_id() const;
  void _internal_set_peer_id(const std::string& value);
  std::string* _internal_mutable_peer_id();
  public:

  // optional int64 term = 3;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 last_log_term = 4;
  bool has_last_log_term() const;
  private:
  bool _internal_has_last_log_term() const;
  public:
  void clear_last_log_term();
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_term() const;
  void set_last_log_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_log_term() const;
  void _internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 last_log_index = 5;
  bool has_last_log_index() const;
  private:
  bool _internal_has_last_log_index() const;
  public:
  void clear_last_log_index();
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_index() const;
  void set_last_log_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_log_index() const;
  void _internal_set_last_log_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hit_consistency.RequestVoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_term_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_index_;
  friend struct ::TableStruct_raft_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hit_consistency.RequestVoteResponse) */ {
 public:
  inline RequestVoteResponse() : RequestVoteResponse(nullptr) {};
  virtual ~RequestVoteResponse();

  RequestVoteResponse(const RequestVoteResponse& from);
  RequestVoteResponse(RequestVoteResponse&& from) noexcept
    : RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
               &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResponse* New() const final {
    return CreateMaybeMessage<RequestVoteResponse>(nullptr);
  }

  RequestVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteResponse& from);
  void MergeFrom(const RequestVoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hit_consistency.RequestVoteResponse";
  }
  protected:
  explicit RequestVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessage_2eproto);
    return ::descriptor_table_raft_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kGrantedFieldNumber = 2,
  };
  // optional int64 term = 1;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool granted = 2;
  bool has_granted() const;
  private:
  bool _internal_has_granted() const;
  public:
  void clear_granted();
  bool granted() const;
  void set_granted(bool value);
  private:
  bool _internal_granted() const;
  void _internal_set_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hit_consistency.RequestVoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  bool granted_;
  friend struct ::TableStruct_raft_5fmessage_2eproto;
};
// ===================================================================

class RaftService_Stub;

class RaftService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftService() {};
 public:
  virtual ~RaftService();

  typedef RaftService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void prevote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::hit_consistency::RequestVoteRequest* request,
                       ::hit_consistency::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService);
};

class RaftService_Stub : public RaftService {
 public:
  RaftService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RaftService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RaftService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RaftService ------------------------------------------

  void prevote(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::hit_consistency::RequestVoteRequest* request,
                       ::hit_consistency::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteRequest

// optional string server_id = 1;
inline bool RequestVoteRequest::_internal_has_server_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_server_id() const {
  return _internal_has_server_id();
}
inline void RequestVoteRequest::clear_server_id() {
  server_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestVoteRequest::server_id() const {
  // @@protoc_insertion_point(field_get:hit_consistency.RequestVoteRequest.server_id)
  return _internal_server_id();
}
inline void RequestVoteRequest::set_server_id(const std::string& value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:hit_consistency.RequestVoteRequest.server_id)
}
inline std::string* RequestVoteRequest::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:hit_consistency.RequestVoteRequest.server_id)
  return _internal_mutable_server_id();
}
inline const std::string& RequestVoteRequest::_internal_server_id() const {
  return server_id_.Get();
}
inline void RequestVoteRequest::_internal_set_server_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestVoteRequest::set_server_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  server_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hit_consistency.RequestVoteRequest.server_id)
}
inline void RequestVoteRequest::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hit_consistency.RequestVoteRequest.server_id)
}
inline void RequestVoteRequest::set_server_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hit_consistency.RequestVoteRequest.server_id)
}
inline std::string* RequestVoteRequest::_internal_mutable_server_id() {
  _has_bits_[0] |= 0x00000001u;
  return server_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestVoteRequest::release_server_id() {
  // @@protoc_insertion_point(field_release:hit_consistency.RequestVoteRequest.server_id)
  if (!_internal_has_server_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return server_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestVoteRequest::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hit_consistency.RequestVoteRequest.server_id)
}
inline std::string* RequestVoteRequest::unsafe_arena_release_server_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hit_consistency.RequestVoteRequest.server_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return server_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequestVoteRequest::unsafe_arena_set_allocated_server_id(
    std::string* server_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hit_consistency.RequestVoteRequest.server_id)
}

// optional string peer_id = 2;
inline bool RequestVoteRequest::_internal_has_peer_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_peer_id() const {
  return _internal_has_peer_id();
}
inline void RequestVoteRequest::clear_peer_id() {
  peer_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RequestVoteRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:hit_consistency.RequestVoteRequest.peer_id)
  return _internal_peer_id();
}
inline void RequestVoteRequest::set_peer_id(const std::string& value) {
  _internal_set_peer_id(value);
  // @@protoc_insertion_point(field_set:hit_consistency.RequestVoteRequest.peer_id)
}
inline std::string* RequestVoteRequest::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable:hit_consistency.RequestVoteRequest.peer_id)
  return _internal_mutable_peer_id();
}
inline const std::string& RequestVoteRequest::_internal_peer_id() const {
  return peer_id_.Get();
}
inline void RequestVoteRequest::_internal_set_peer_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestVoteRequest::set_peer_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  peer_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hit_consistency.RequestVoteRequest.peer_id)
}
inline void RequestVoteRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hit_consistency.RequestVoteRequest.peer_id)
}
inline void RequestVoteRequest::set_peer_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  peer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hit_consistency.RequestVoteRequest.peer_id)
}
inline std::string* RequestVoteRequest::_internal_mutable_peer_id() {
  _has_bits_[0] |= 0x00000002u;
  return peer_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestVoteRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:hit_consistency.RequestVoteRequest.peer_id)
  if (!_internal_has_peer_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return peer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestVoteRequest::set_allocated_peer_id(std::string* peer_id) {
  if (peer_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  peer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hit_consistency.RequestVoteRequest.peer_id)
}
inline std::string* RequestVoteRequest::unsafe_arena_release_peer_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hit_consistency.RequestVoteRequest.peer_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return peer_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequestVoteRequest::unsafe_arena_set_allocated_peer_id(
    std::string* peer_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (peer_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  peer_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      peer_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hit_consistency.RequestVoteRequest.peer_id)
}

// optional int64 term = 3;
inline bool RequestVoteRequest::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_term() const {
  return _internal_has_term();
}
inline void RequestVoteRequest::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:hit_consistency.RequestVoteRequest.term)
  return _internal_term();
}
inline void RequestVoteRequest::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  term_ = value;
}
inline void RequestVoteRequest::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:hit_consistency.RequestVoteRequest.term)
}

// optional int64 last_log_term = 4;
inline bool RequestVoteRequest::_internal_has_last_log_term() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_last_log_term() const {
  return _internal_has_last_log_term();
}
inline void RequestVoteRequest::clear_last_log_term() {
  last_log_term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::_internal_last_log_term() const {
  return last_log_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::last_log_term() const {
  // @@protoc_insertion_point(field_get:hit_consistency.RequestVoteRequest.last_log_term)
  return _internal_last_log_term();
}
inline void RequestVoteRequest::_internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_log_term_ = value;
}
inline void RequestVoteRequest::set_last_log_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_log_term(value);
  // @@protoc_insertion_point(field_set:hit_consistency.RequestVoteRequest.last_log_term)
}

// optional int64 last_log_index = 5;
inline bool RequestVoteRequest::_internal_has_last_log_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RequestVoteRequest::has_last_log_index() const {
  return _internal_has_last_log_index();
}
inline void RequestVoteRequest::clear_last_log_index() {
  last_log_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::_internal_last_log_index() const {
  return last_log_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::last_log_index() const {
  // @@protoc_insertion_point(field_get:hit_consistency.RequestVoteRequest.last_log_index)
  return _internal_last_log_index();
}
inline void RequestVoteRequest::_internal_set_last_log_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_log_index_ = value;
}
inline void RequestVoteRequest::set_last_log_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_log_index(value);
  // @@protoc_insertion_point(field_set:hit_consistency.RequestVoteRequest.last_log_index)
}

// -------------------------------------------------------------------

// RequestVoteResponse

// optional int64 term = 1;
inline bool RequestVoteResponse::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestVoteResponse::has_term() const {
  return _internal_has_term();
}
inline void RequestVoteResponse::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:hit_consistency.RequestVoteResponse.term)
  return _internal_term();
}
inline void RequestVoteResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  term_ = value;
}
inline void RequestVoteResponse::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:hit_consistency.RequestVoteResponse.term)
}

// optional bool granted = 2;
inline bool RequestVoteResponse::_internal_has_granted() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestVoteResponse::has_granted() const {
  return _internal_has_granted();
}
inline void RequestVoteResponse::clear_granted() {
  granted_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RequestVoteResponse::_internal_granted() const {
  return granted_;
}
inline bool RequestVoteResponse::granted() const {
  // @@protoc_insertion_point(field_get:hit_consistency.RequestVoteResponse.granted)
  return _internal_granted();
}
inline void RequestVoteResponse::_internal_set_granted(bool value) {
  _has_bits_[0] |= 0x00000002u;
  granted_ = value;
}
inline void RequestVoteResponse::set_granted(bool value) {
  _internal_set_granted(value);
  // @@protoc_insertion_point(field_set:hit_consistency.RequestVoteResponse.granted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hit_consistency

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_5fmessage_2eproto
