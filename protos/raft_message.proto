syntax = "proto2";

import "enum.proto";

package hit_consistency;

option cc_generic_services = true;
// The Raft service.
service RaftService {
    // Sends a greeting
    rpc prevote (RequestVoteRequest) returns (RequestVoteResponse) {}
    rpc request_vote (RequestVoteRequest) returns (RequestVoteResponse) {}
    rpc append_entries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
    rpc timeout_now(TimeoutNowRequest) returns (TimeoutNowResponse) {}
    rpc client_request(ClientRequest) returns (ClientResponse) {}
}
  

message TimeoutNowRequest {
    required string group_id = 1;
    required string server_id = 2;
    required string peer_id = 3;
    required int64 term = 4;
}

message TimeoutNowResponse {
    required int64 term = 1;
    required bool success = 2;
}


message EntryMeta {
    required int64 term = 1;
    required EntryType type = 2;
    repeated string peers = 3;
    optional int64 data_len = 4;
    // Don't change field id of `old_peers' in the consideration of backward
    // compatibility
    repeated string old_peers = 5;
};

message RequestVoteRequest {
    optional string server_id = 1;
    optional string peer_id = 2;
    optional int64 term = 3;
    optional int64 last_log_term = 4;
    optional int64 last_log_index = 5;
}

message RequestVoteResponse {
    optional int64 term = 1;
    optional bool granted = 2;
};

message AppendEntriesRequest {
    required string group_id = 1;
    required string server_id = 2;
    required string peer_id = 3;
    required int64 term = 4;
    required int64 prev_log_term = 5;
    required int64 prev_log_index = 6;
    repeated EntryMeta entries = 7;
    required int64 committed_index = 8;
};

message AppendEntriesResponse {
    required int64 term = 1;
    required bool success = 2;
    optional int64 last_log_index = 3;
    optional bool readonly = 4;
};

message ClientRequest{
    required string payload = 1;
}

message ClientResponse{
    required bool success = 1;
    optional string redirect = 2;
}